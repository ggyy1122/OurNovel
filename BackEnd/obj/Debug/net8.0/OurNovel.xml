<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OurNovel</name>
    </assembly>
    <members>
        <!-- Badly formed XML comment ignored for member "T:OurNovel.Controllers.BaseController`2" -->
        <member name="M:OurNovel.Controllers.BaseController`2.Options">
            <summary>
            处理 CORS 预检请求（OPTIONS）
            </summary>
        </member>
        <member name="M:OurNovel.Controllers.BaseController`2.GetAll">
            <summary>
            获取所有实体数据
            </summary>
        </member>
        <member name="M:OurNovel.Controllers.BaseController`2.GetById(`1)">
            <summary>
            根据主键获取单个实体
            </summary>
        </member>
        <member name="M:OurNovel.Controllers.BaseController`2.Create(`0)">
            <summary>
            添加实体
            </summary>
        </member>
        <member name="M:OurNovel.Controllers.BaseController`2.Update(`1,`0)">
            <summary>
            更新实体
            </summary>
        </member>
        <member name="M:OurNovel.Controllers.BaseController`2.Delete(`1)">
            <summary>
            删除实体
            </summary>
        </member>
<<<<<<< HEAD
        <member name="T:OurNovel.Controllers.ChapterController">
            <summary>
            章节控制器：提供章节的增删查改接口，基于复合主键 NovelId + ChapterId
            </summary>
        </member>
        <member name="M:OurNovel.Controllers.ChapterController.GetChaptersByNovel(System.Int32)">
            <summary>
            获取指定小说下的所有章节
            </summary>
        </member>
        <member name="M:OurNovel.Controllers.ChapterController.GetChapter(System.Int32,System.Int32)">
            <summary>
            获取某一章节（通过 NovelId 和 ChapterId）
            </summary>
        </member>
        <member name="M:OurNovel.Controllers.ChapterController.AddChapter(OurNovel.Models.Chapter)">
            <summary>
            添加章节
            </summary>
        </member>
        <member name="M:OurNovel.Controllers.ChapterController.UpdateChapter(OurNovel.Models.Chapter)">
            <summary>
            更新章节
            </summary>
        </member>
        <member name="M:OurNovel.Controllers.ChapterController.DeleteChapter(System.Int32,System.Int32)">
            <summary>
            删除章节（通过 NovelId 和 ChapterId）
            </summary>
=======
        <member name="T:OurNovel.Controllers.NovelController">
            <summary>
            小说控制器，继承基类控制器，实现对 Novel 实体的 CRUD 操作
            </summary>
        </member>
        <member name="M:OurNovel.Controllers.NovelController.UploadCover(System.Int32,Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            上传小说封面，并更新封面URL
            </summary>
            <param name="novelId">小说ID</param>
            <param name="coverFile">封面文件</param>
            <returns>封面URL</returns>
>>>>>>> c993fb85c5241547d159508c1ed608240af2d0d1
        </member>
        <member name="T:OurNovel.Controllers.ReaderController">
            <summary>
            读者控制器，继承基类控制器，实现对 Reader 实体的 CRUD 操作
            </summary>
        </member>
        <member name="M:OurNovel.Controllers.ReaderController.UploadAvatar(System.Int32,Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            上传读者头像，并更新头像URL
            </summary>
            <param name="readerId">读者ID</param>
            <param name="avatarFile">头像文件</param>
            <returns>头像URL</returns>
        </member>
        <member name="T:OurNovel.Data.AppDbContext">
            <summary>
            应用程序的数据库上下文类，继承自 EF Core 的 DbContext
            用于定义数据库连接和表映射
            </summary>
        </member>
        <member name="M:OurNovel.Data.AppDbContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{OurNovel.Data.AppDbContext})">
            <summary>
            构造函数，接收配置好的 DbContextOptions 并传递给基类
            </summary>
            <param name="options">数据库上下文配置项</param>
        </member>
        <member name="M:OurNovel.Data.AppDbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            配置实体和数据库表结构映射关系的方法
            </summary>
            <param name="modelBuilder">用于构建模型的 ModelBuilder 对象</param>
        </member>
<<<<<<< HEAD
        <member name="T:OurNovel.Data.Configurations.ChapterConfiguration">
            <summary>
            Chapter 实体类的数据库配置（通过 Fluent API）
            </summary>
=======
        <!-- Badly formed XML comment ignored for member "T:OurNovel.Data.Configurations.NovelConfiguration" -->
        <member name="M:OurNovel.Data.Configurations.NovelConfiguration.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{OurNovel.Models.Novel})">
            <summary>
            配置 Novel 实体对应的数据库表结构
            </summary>
            <param name="entity">实体构建器，用于配置字段属性和关系</param>
>>>>>>> c993fb85c5241547d159508c1ed608240af2d0d1
        </member>
        <!-- Badly formed XML comment ignored for member "T:OurNovel.Data.Configurations.ReaderConfiguration" -->
        <member name="M:OurNovel.Data.Configurations.ReaderConfiguration.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{OurNovel.Models.Reader})">
            <summary>
            配置 Reader 实体对应的数据库表结构
            </summary>
            <param name="entity">实体构建器，用于配置字段属性和关系</param>
        </member>
        <member name="T:OurNovel.Models.Chapter">
            <summary>
            章节实体类，使用复合主键（NovelId + ChapterId）
            </summary>
        </member>
        <member name="P:OurNovel.Models.Chapter.NovelId">
            所属小说ID（复合主键之一）
        </member>
        <member name="P:OurNovel.Models.Chapter.ChapterId">
            章节编号（复合主键之一）
        </member>
        <member name="P:OurNovel.Models.Chapter.Title">
            标题，最大长度40，不能为空
        </member>
        <member name="P:OurNovel.Models.Chapter.Content">
            章节内容（长文本）
        </member>
        <member name="P:OurNovel.Models.Chapter.WordCount">
            字数，不能为空
        </member>
        <member name="P:OurNovel.Models.Chapter.PricePerKilo">
            千字单价，默认0.50，保留两位小数
        </member>
        <member name="P:OurNovel.Models.Chapter.CalculatedPrice">
            计算价格，自动计算（非映射字段）
        </member>
        <member name="P:OurNovel.Models.Chapter.IsCharged">
            是否收费：是/否
        </member>
        <member name="P:OurNovel.Models.Chapter.PublishTime">
            发布时间
        </member>
        <member name="P:OurNovel.Models.Chapter.Status">
            状态：通过 / 封禁（默认通过）
        </member>
        <member name="T:OurNovel.Repositories.ChapterRepository">
            <summary>
            Chapter 仓储实现类，适配复合主键（NovelId + ChapterId）
            </summary>
        </member>
        <member name="M:OurNovel.Repositories.ChapterRepository.GetByNovelIdAsync(System.Int32)">
            <summary>
            获取某部小说下的所有章节
            </summary>
        </member>
        <member name="M:OurNovel.Repositories.ChapterRepository.GetByIdAsync(System.Int32,System.Int32)">
            <summary>
            根据复合主键获取章节
            </summary>
        </member>
        <member name="M:OurNovel.Repositories.ChapterRepository.AddAsync(OurNovel.Models.Chapter)">
            <summary>
            添加新章节
            </summary>
        </member>
        <member name="M:OurNovel.Repositories.ChapterRepository.UpdateAsync(OurNovel.Models.Chapter)">
            <summary>
            更新章节
            </summary>
        </member>
        <member name="M:OurNovel.Repositories.ChapterRepository.DeleteAsync(System.Int32,System.Int32)">
            <summary>
            删除章节
            </summary>
        </member>
        <member name="T:OurNovel.Repositories.IChapterRepository">
            <summary>
            Chapter 仓储接口，适配复合主键，定义章节数据访问方法
            </summary>
        </member>
        <member name="M:OurNovel.Repositories.IChapterRepository.GetByNovelIdAsync(System.Int32)">
            获取某部小说下的所有章节
        </member>
        <member name="M:OurNovel.Repositories.IChapterRepository.GetByIdAsync(System.Int32,System.Int32)">
            根据主键（novelId, chapterId）获取章节
        </member>
        <member name="M:OurNovel.Repositories.IChapterRepository.AddAsync(OurNovel.Models.Chapter)">
            添加新章节
        </member>
        <member name="M:OurNovel.Repositories.IChapterRepository.UpdateAsync(OurNovel.Models.Chapter)">
            更新章节
        </member>
        <member name="M:OurNovel.Repositories.IChapterRepository.DeleteAsync(System.Int32,System.Int32)">
            删除章节
        </member>
        <member name="T:OurNovel.Repositories.IRepository`2">
            <summary>
            泛型仓储接口，定义常用的增删查改方法
            </summary>
        </member>
        <member name="T:OurNovel.Repositories.Repository`2">
            <summary>
            泛型仓储基类，封装对数据库表的通用CRUD操作
            </summary>
            <typeparam name="T">实体类型（如Reader、Post）</typeparam>
            <typeparam name="TKey">实体主键类型（如int、string）</typeparam>
        </member>
        <member name="M:OurNovel.Repositories.Repository`2.#ctor(OurNovel.Data.AppDbContext)">
            <summary>
            构造函数，通过依赖注入获取数据库上下文
            </summary>
            <param name="context">数据库上下文实例</param>
        </member>
        <member name="M:OurNovel.Repositories.Repository`2.GetAllAsync">
            <summary>
            异步获取所有实体记录
            </summary>
            <returns>实体集合（IEnumerable）</returns>
        </member>
        <member name="M:OurNovel.Repositories.Repository`2.AddAsync(`0)">
            <summary>
            异步添加新实体到数据库
            </summary>
            <param name="entity">要添加的实体对象</param>
        </member>
        <member name="M:OurNovel.Repositories.Repository`2.UpdateAsync(`0)">
            <summary>
            异步更新现有实体
            </summary>
            <param name="entity">要更新的实体对象</param>
        </member>
        <member name="M:OurNovel.Repositories.Repository`2.GetByIdAsync(`1)">
            <summary>
            异步根据主键ID查询单个实体
            </summary>
            <param name="id">主键值</param>
            <returns>找到的实体或null</returns>
        </member>
        <member name="M:OurNovel.Repositories.Repository`2.DeleteAsync(`1)">
            <summary>
            异步根据主键ID删除实体
            </summary>
            <param name="id">主键值</param>
        </member>
        <member name="T:OurNovel.Services.BaseService`2">
            <summary>
            泛型基础服务，封装常规增删查改
            </summary>
        </member>
        <member name="M:OurNovel.Services.BaseService`2.#ctor(OurNovel.Repositories.IRepository{`0,`1})">
            <summary>
            构造函数，注入仓储实例
            </summary>
        </member>
        <member name="M:OurNovel.Services.BaseService`2.GetAllAsync">
            <summary>
            获取所有实体记录
            </summary>
        </member>
        <member name="M:OurNovel.Services.BaseService`2.AddAsync(`0)">
            <summary>
            添加新实体
            </summary>
            <param name="entity">要添加的实体对象</param>
        </member>
        <member name="M:OurNovel.Services.BaseService`2.UpdateAsync(`0)">
            <summary>
            更新现有实体
            </summary>
            <param name="entity">要更新的实体对象</param>
        </member>
        <member name="M:OurNovel.Services.BaseService`2.GetByIdAsync(`1)">
            <summary>
            根据主键ID获取单个实体
            </summary>
            <param name="id">实体主键ID</param>
        </member>
        <member name="M:OurNovel.Services.BaseService`2.DeleteAsync(`1)">
            <summary>
            根据主键ID删除实体
            </summary>
            <param name="id">要删除的实体主键ID</param>
        </member>
        <member name="T:OurNovel.Services.ChapterService">
            <summary>
            Chapter 服务类，提供章节相关的业务逻辑
            </summary>
        </member>
        <member name="M:OurNovel.Services.ChapterService.GetChaptersByNovelAsync(System.Int32)">
            <summary>
            获取指定小说下的所有章节
            </summary>
        </member>
        <member name="M:OurNovel.Services.ChapterService.GetChapterAsync(System.Int32,System.Int32)">
            <summary>
            获取指定章节
            </summary>
        </member>
        <member name="M:OurNovel.Services.ChapterService.AddChapterAsync(OurNovel.Models.Chapter)">
            <summary>
            添加新章节
            </summary>
        </member>
        <member name="M:OurNovel.Services.ChapterService.UpdateChapterAsync(OurNovel.Models.Chapter)">
            <summary>
            更新章节内容
            </summary>
        </member>
        <member name="M:OurNovel.Services.ChapterService.DeleteChapterAsync(System.Int32,System.Int32)">
            <summary>
            删除章节
            </summary>
        </member>
        <member name="T:OurNovel.Services.FileStorage.LocalFileStorageService">
            <summary>
            本地文件存储服务（实现 IFileStorageService）
            </summary>
        </member>
        <member name="M:OurNovel.Services.FileStorage.LocalFileStorageService.UploadAsync(Microsoft.AspNetCore.Http.IFormFile,System.String)">
            <summary>
            上传文件到指定子目录（如 "avatars" 或 "book"）
            </summary>
            <param name="file">上传的文件</param>
            <param name="subFolder">子目录名，不带斜杠</param>
            <returns>返回公网访问 URL</returns>
        </member>
        <member name="M:OurNovel.Services.FileStorage.LocalFileStorageService.Delete(System.String,System.String)">
            <summary>
            删除指定子目录中的文件
            </summary>
            <param name="fileUrl">文件访问 URL</param>
            <param name="subFolder">子目录名，不带斜杠</param>
        </member>
        <member name="T:OurNovel.Services.FileStorage.Interfaces.IFileStorageService">
            <summary>
            文件存储服务接口（抽象上传、删除等操作）
            </summary>
        </member>
        <member name="M:OurNovel.Services.FileStorage.Interfaces.IFileStorageService.UploadAsync(Microsoft.AspNetCore.Http.IFormFile,System.String)">
            <summary>
            上传文件并返回可访问的URL
            </summary>
            <param name="file">前端上传的文件</param>
            <param name="subFolder">上传文件保存的子目录名（不带斜杠），例如 "avatars" 或 "book"</param>
            <returns>文件访问URL（如 "/avatars/xxx.jpg"）</returns>
        </member>
        <member name="M:OurNovel.Services.FileStorage.Interfaces.IFileStorageService.Delete(System.String,System.String)">
            <summary>
            根据文件URL删除指定子目录下的文件
            </summary>
            <param name="fileUrl">文件的完整URL或相对路径</param>
            <param name="subFolder">文件所在的子目录名（不带斜杠）</param>
        </member>
        <member name="T:OurNovel.Services.NovelService">
            <summary>
            Novel 服务，继承基础服务，如有特殊业务再扩展
            </summary>
        </member>
        <member name="M:OurNovel.Services.NovelService.UploadCoverAsync(System.Int32,Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            上传小说封面，并更新封面地址
            </summary>
            <param name="novelId">小说ID</param>
            <param name="coverFile">封面文件</param>
            <returns>封面URL</returns>
        </member>
        <member name="T:OurNovel.Services.ReaderService">
            <summary>
            Reader 服务，继承基础服务，如有特殊业务再扩展
            </summary>
        </member>
        <member name="M:OurNovel.Services.ReaderService.UploadAvatarAsync(System.Int32,Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            上传读者头像，并更新头像地址
            </summary>
            <param name="readerId">读者ID</param>
            <param name="avatarFile">头像文件</param>
            <returns>头像URL</returns>
        </member>
    </members>
</doc>
